// <auto-generated />
using System;
using Data_Access_Layer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data_Access_Layer.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entity_Layer.Concrete.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Entity_Layer.Concrete.Column", b =>
                {
                    b.Property<int>("ColumnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColumnId"), 1L, 1);

                    b.Property<string>("ColumnName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColumnId");

                    b.ToTable("Columns");
                });

            modelBuilder.Entity("Entity_Layer.Concrete.Step", b =>
                {
                    b.Property<int>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StepId"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptedResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestCaseId")
                        .HasColumnType("int");

                    b.HasKey("StepId");

                    b.HasIndex("TestCaseId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("Entity_Layer.Concrete.TestCase", b =>
                {
                    b.Property<int>("TestCaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestCaseId"), 1L, 1);

                    b.Property<bool>("CaseResult")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Precondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestSetId")
                        .HasColumnType("int");

                    b.Property<string>("TestType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("TestCaseId");

                    b.HasIndex("TestSetId");

                    b.HasIndex("TicketId");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("Entity_Layer.Concrete.TestSet", b =>
                {
                    b.Property<int>("TestSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestSetId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestSetId");

                    b.ToTable("TestSets");
                });

            modelBuilder.Entity("Entity_Layer.Concrete.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"), 1L, 1);

                    b.Property<int>("AssignedId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedUserUserId")
                        .HasColumnType("int");

                    b.Property<int>("ColumnId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EstimatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTester")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reporter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tester")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TicketId");

                    b.HasIndex("AssignedUserUserId");

                    b.HasIndex("ColumnId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Entity_Layer.Concrete.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entity_Layer.Concrete.Step", b =>
                {
                    b.HasOne("Entity_Layer.Concrete.TestCase", "TestCase")
                        .WithMany("Steps")
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("Entity_Layer.Concrete.TestCase", b =>
                {
                    b.HasOne("Entity_Layer.Concrete.TestSet", "TestSet")
                        .WithMany("TestCases")
                        .HasForeignKey("TestSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity_Layer.Concrete.Ticket", "Ticket")
                        .WithMany("TestCases")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestSet");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Entity_Layer.Concrete.Ticket", b =>
                {
                    b.HasOne("Entity_Layer.Concrete.User", "AssignedUser")
                        .WithMany("Tickets")
                        .HasForeignKey("AssignedUserUserId");

                    b.HasOne("Entity_Layer.Concrete.Column", "Column")
                        .WithMany("Tickets")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("Column");
                });

            modelBuilder.Entity("Entity_Layer.Concrete.Column", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Entity_Layer.Concrete.TestCase", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Entity_Layer.Concrete.TestSet", b =>
                {
                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("Entity_Layer.Concrete.Ticket", b =>
                {
                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("Entity_Layer.Concrete.User", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
